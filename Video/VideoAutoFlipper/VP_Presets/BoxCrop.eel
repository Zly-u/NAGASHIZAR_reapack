//Box Crop
//By Zly

//@param<idx>[:varname] 'name' [defval minval maxval centval step]
//@param1:x_off "X Offset" 0 -1 1 0 0.01
//@param2:y_off "Y Offset" 0 -1 1 0 0.01

//@param4:source_scale "Source Scale" 1 0.1 10 5 0.01

//@param6:box_size "Box Size" 1 0.001 1 0.5 0.01
//@param7:aspect_ratio "Aspect Ratio" 1 0 1 0.5 0.01


//@param9:p_bg_clr 'green/blue bg' 1 0 1 0.1 1

gfx_b = p_bg_clr;
gfx_g = 1-p_bg_clr;
gfx_fillrect(0, 0, project_w, project_h);

////////////////////////////////////////////////////

bg_img = input_track(0);
(bg_img) ? (
  input_info(0, src_w, src_h);

  base_prj_size = project_w > project_h ? project_h : project_w;
  base_src_size = src_w > src_h ? src_h : src_w;

  remaining_prj_size = project_w - base_prj_size;
  remaining_src_size = src_w - base_src_size;

  base_prj_width = (base_prj_size + remaining_prj_size * aspect_ratio) * box_size;
  base_src_width = (base_src_size + remaining_src_size * aspect_ratio) * box_size;

  gfx_blit(
    0, 0,

    // Viewport //

    // x, y
    project_w >> 1 - base_prj_width >> 1,
    project_h >> 1 - (base_prj_size * box_size) >> 1,
    // w, h
    base_prj_width,
    base_prj_size * box_size,

    // Source //

    // x, y
    src_w >> 1 - (base_src_width >> 1 + x_off * src_w) / source_scale,
    src_h >> 1 - ((base_src_size * box_size) >> 1 + y_off * src_h) / source_scale,
    // w, h
    base_src_width / source_scale,
    base_src_size * box_size / source_scale
  );
);